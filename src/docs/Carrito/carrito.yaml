paths:
  /api/carts:
    post:
      summary: Crea un nuevo Cart vacio
      operationId: createCart
      tags:
        - carts
      responses:
        '201':
          description: Cart creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/carts'
  /api/carts/{_id}:
    get:
      summary: Obtiene un Cart con todos sus productos
      tags:
        - carts
      parameters:
        - name: _id
          in: path
          required: true
          description: ID del cart que se busca
          schema:
            $type: String
      responses:
        '200':
          description: Cart encontrado
          content:
            application/json:
              schema:
                $ref: '#components/schemas/getCartId'
        '404':
          description: Cart does not exist
          content:
            application/json:
              schema:
                $ref: '#components/schemas/CartNotExist'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#components/Error'
    put:
      summary: Actualizar un carts a partir del ID
      tags:
        - carts
      parameters:
        - name: _id
          in: path
          required: true
          description: ID del cart que se busca
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/updateCart'
      responses:
        '200':
          description: cart modificado exitosamente
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Success'
    delete:
      summary: elimina un cart por su ID
      tags:
        - carts
      operationId: deleteCart
      parameters:
        - name: _id
          in: path
          description: ID of cart to delete
          required: true
          schema:
            $type: String
      responses:
        '204':
          description: cart deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteCart'
  /api/carts/{_id}/product/{pid}:
    delete:
      summary: elimina un producto del cart por su ID
      tags:
        - carts
      operationId: deleteProductInCart
      parameters:
        - name: _id
          in: path
          description: Cart Id
          required: true
        - name: pid
          in: path
          description: Product Id to delete
          required: true
      responses:
        '204':
          description: product was removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteProduct'
    post:
      summary: Agrega un producto al cart
      operationId: addProduct
      tags:
        - carts
      parameters:
        - name: _id
          in: path
          description: Cart Id
          required: true
          schema:
            $type: String
        - name: pid
          in: path
          description: Product Id to add
          required: true
          schema:
            $type: String
      responses:
        '201':
          description: producto agregado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productToCart'
    put:
      summary: actualizar un carts a partir del ID
      tags:
        - carts
      parameters:
        - name: _id
          in: path
          description: Cart Id
          required: true
          schema:
            $type: String
        - name: pid
          in: path
          description: Product Id to add
          required: true
          schema:
            $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/newProduct'
      responses:
        '200':
          description: cart modificado exitosamente
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Success'
components:
  schemas:
    Success:
      type: object
      properties:
        status:
          type: String
          description: success or error
        code:
          type: Number
          description: c√≥digo de respuesta HTTP.
        payload:
          type: Array
          description: array con la informacion de la peticion requerida
        message:
          type: String
          description: aclarando que ocurrio
      example:
        status: Success
        code: 201
        payload: {}
        message: createCart
    carts:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        status: Success
        code: 201
        payload: { _id: ObjectId(644081a93f0625dc193bc594), products: [], __v: 0 }
        message: cart created
    deleteCart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        status: Success
        code: 204
        payload: {}
        message: Cart deleted successfully
    deleteProduct:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        status: Success
        code: 204
        payload: { _id: '65105847ae42559cf1d8326a', products: [], __v: 2 }
        message: Product deleted successfully
    CartNotExist:
      type: object
      properties:
        status:
          type: string
        code:
          type: integer
        payload:
          type: object
        message:
          type: string
      example:
        status: Fail
        code: 404
        payload: {}
        message: The cart does not exist
    productToCart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        status: Success
        code: 201
        payload: { _id: ObjectId(644081a93f0625dc193bc594), products: [{ productId: '64e394aae1a8b02293416d3b', quantity: 1, _id: '65104bf300916eb5923834be' }], __v: 0 }
        message: product added successfully
    getCartId:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        status: Success
        code: 200
        payload:
          {
            _id: ObjectId(644081a93f0625dc193bc594),
            products:
              [
                {
                  productId":
                    {
                      owner": 'admin',
                      _id": '64e394aae1a8b02293416d3b',
                      title": 'Bacon',
                      description": 'The automobile layout consists of a front-engine design, with transaxle-type transmissions',
                      category": 'Outdoors',
                      price": '$1001',
                      thumbnail": 'furthermore_partially.webm',
                      code": 'ZEZAg9OitW',
                      stock": 25,
                      __v": 0,
                    },
                  quantity: 1,
                  _id: '65104bf300916eb5923834be',
                },
              ],
            __v: 0,
          }
        message: Cart with products retrieved successfully
  requestBodies:
    newProduct:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: Number
          description: cantidad de Unidades
      example:
        quantity: 10
    updateCart:
      type: object
      properties:
        _id:
          type: ObjectId
          description: ID auto generado by mongo
        products:
          type: Array
          description: Ids de los productos a comprar
      example:
        products: [{ _id: '648a287a1df594f1632f89b2', quantity: 10 }]
  Error:
    type: object
    properties:
      status:
        type: string
        example: error
      error:
        type: string
        example: UNEXPECTED ERROR...



                
